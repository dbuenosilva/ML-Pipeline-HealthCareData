print(db.shape)print(np.sum(db.isnull()))print(db.head())#Get the X and Y for test and trainingdf = convert(db) # Used function that converted the columns with string values to number X = df.iloc[:,:-1].values y = df.iloc[:,-1].values print(X.shape, y.shape)# Split the data to 80% training and 20% testeX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)print(X_train.shape, y_train.shape)# fit the modelmy_model = LinearRegression()my_model.fit(X_train, y_train)# evaluate modelY = my_model.predict(X_test)# show the mean absolute errormae = mean_absolute_error(y_test, Y)print('mae %.3f' % mae)# Into the training dataset indenfing the outliers Loc_OF = LocalOutlierFactor() Y = Loc_OF.fit_predict(X_train)# select all rows that are not outliersmask_out = Y != -1X_train, y_train = X_train[mask_out, :], y_train[mask_out]# summarize the shape of the updated training datasetprint(X_train.shape, y_train.shape)# fit the modelmy_model = LinearRegression()my_model.fit(X_train, y_train)# evaluate the modelY = my_model.predict(X_test)# show the mean absolute errormae = mean_absolute_error(y_test, Y)print('MAE not Outliers: %.3f' % mae)