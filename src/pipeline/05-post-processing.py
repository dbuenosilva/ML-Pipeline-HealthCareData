# -*- coding: utf-8 -*-########################################################################### Project: COMP6004 - Machine learning pipeline for data analysis# File: 05-post-processing.py# Author: Vanessa Gomes - v.gomes.da.silva.10@student.scu.edu.au # Date: 20/04/2021# Description: Libraries used to dimensionality reduction process############################################################################ Maintenance                            # Author: Diego Bueno# Date:26/04/2021# Description: Adaption to the final processed data. ###########################################################################>import numpy as npfrom functions import openfilefrom numpy import set_printoptionsfrom functions import savefilefrom sklearn.decomposition import PCAfrom sklearn.feature_selection import SelectKBestfrom sklearn.feature_selection import f_classiffrom sklearn.feature_selection import RFEfrom sklearn.linear_model import LogisticRegressionfrom sklearn.ensemble import ExtraTreesClassifierfrom sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import mean_absolute_errorfrom sklearn.neighbors import LocalOutlierFactor#calling the function to Load data pre-reading on task 1print("\nReading the step04 file\n")db = openfile('data/step04.csv')print("\nChecking the current shape of the data:")rows, columns = db.shapeprint( str(rows) + " rows and " + str(columns) + " columns")print("\nBrief summary of data:\n")print(db.head(5))#####################################################  Starting the process of pos-processing and inference##################################################### Used function that converted the columns with string values to number X = db.iloc[:,:-1].valuesy = db.iloc[:,-1].valuesprint(X)print(X.shape, y.shape)# Split the data to 80% training and 20% testeX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)print(X_train.shape, y_train.shape)# fit the modelmy_model = LinearRegression()my_model.fit(X_train, y_train)# evaluate modelY = my_model.predict(X_test)# show the mean absolute errormae = mean_absolute_error(y_test, Y)print('mae %.3f' % mae)# Into the training dataset indenfing the outliers Loc_OF = LocalOutlierFactor() Y = Loc_OF.fit_predict(X_train)# select all rows that are not outliersmask_out = Y != -1X_train, y_train = X_train[mask_out, :], y_train[mask_out]# summarize the shape of the updated training datasetprint(X_train.shape, y_train.shape)# fit the modelmy_model = LinearRegression()my_model.fit(X_train, y_train)# evaluate the modelY = my_model.predict(X_test)# show the mean absolute errormae = mean_absolute_error(y_test, Y)print('MAE not Outliers: %.3f' % mae)